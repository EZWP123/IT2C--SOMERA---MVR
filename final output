
package it2c.somera.mr;

import java.util.Scanner;


public class IT2CSOMERAMR {

    public static void main(String[] args){
         Scanner sc = new Scanner (System.in);
        String response;
        
        do{
            System.out.println("");
            System.out.println("RENTING APP");
            
            System.out.println("1. Guest");
            System.out.println("2. Movies");
            System.out.println("3. Reservation");      
            System.out.println("4. Reports");
            System.out.println("5. Exit");
            
            System.out.println("Enter action");           
            int  action = sc.nextInt();
            
            switch(action){
                
                case 1:
                             Guest cs = new Guest();
                             cs.gtransaction();
               break;
                
                case 2: 
                             Movies mv = new Movies();
                             mv.mtransaction();
                break;
                
                case 3:  
                             Reservation rs = new Reservation();
                             rs.rtransaction();
                break;
                
                case 4:          Reports report = new Reports();
                                 report.generateReport();      
                   
                break;
            }
            
            System.out.println("Sure? (yes/no)");
                response = sc.next();
         
            
            
            
        }while(response.equals("no"));
        System.out.println("Okay po");
    }

}


























package it2c.somera.mr;

import java.util.Scanner;


public class Guest {
    
    
    
   
  
    public void gtransaction(){
     Scanner sc = new Scanner(System.in);
     String response;
     do{
          System.out.println("GUEST PANEL");
            
            System.out.println("1. ADD GUEST");
            System.out.println("2. VIEW GUEST ");
            System.out.println("3. UPDATE GUEST");      
            System.out.println("4. DELETE GUEST");
             System.out.println("5. EXIT");
            System.out.println("Enter action");           
            int  act = sc.nextInt();
          Guest cs = new Guest();
            switch(act){
                case 1:         cs.addGuest();
                                cs.viewGuest();     
             
               break;
                
                case 2:         cs.viewGuest();
                break;
                
                case 3:         cs.viewGuest();
                                cs.updateGuest();
                                cs.viewGuest();
                break;
                
                case 4:         cs.viewGuest();
                                cs.deleteGuest();
                                cs.viewGuest();
                break;
                
                case 5:           System.out.println("Go backk to main menu?");
                return;  

            default:
                System.out.println("Invalid action. Please try again.");
                break;
        }

        System.out.print("Continue in Guest Panel? (yes/No): ");
        response = sc.next();
        
        if (!response.equalsIgnoreCase("yes")) {
            System.out.println("Going back to main menu...");
            return;  
        }
    

               
                
            
            
            System.out.println("Continue? (yes/No)");
                response = sc.next();
  
            
        }while(response.equals("yes"));
        System.out.println("Thankyou");

             
    }
    
    public void addGuest(){
        Scanner sc = new Scanner(System.in);
        config conf = new config();
        
       
        System.out.print(" First Name: ");
        String fname = sc.next();
        System.out.print(" Last Name: ");
        String lname = sc.next();
        System.out.print(" Email: ");
        String email = sc.next();
        System.out.print(" Contact no.: ");
        String contact = sc.next();
      
        String sql = "INSERT INTO Renting ( r_fname, r_lname, r_email, r_contact) VALUES (  ?, ?, ?, ?)";
        conf.addRecord(sql, fname, lname, email, contact);
    }
     
    
        public void viewGuest(){
         config conf = new config();   
        String cqry = "SELECT * FROM Renting";
        String[] hrds = {"ID", "Name", "Lastname", "Email", "Contact"};
        String[] clmns = {"r_id", "r_fname", "r_lname", "r_email", "r_contact"};
        conf.viewRecords (cqry, hrds, clmns);
        
        }
        
        private void updateGuest(){
            
        Scanner sc = new Scanner(System.in);
        config conf = new config();
            System.out.println("Enter ID to update");     
            int id = sc.nextInt();
       while(conf.getSingleValue("SELECT m_id FROM tbl_movies WHERE m_id = ?",  id)  == 0){
            System.out.println("SELECTED ID DOESNT EXIST");
            System.out.println("PLEASE TRY AGAIN:");
            id = sc.nextInt();
    }
    
            System.out.println("Enter new first name");
            String nfname = sc.next();
            
             System.out.println("Enter new last name");
            String nlname = sc.next();
            
             System.out.println("Enter new email");
            String nemail = sc.next();
            
             System.out.println("Enter new contact");
            String ncontact = sc.next();
            String qry = "UPDATE Renting SET r_fname = ?, r_lname = ?, r_email = ?, r_contact = ? WHERE r_id = ?";        
            conf.updateRecord(qry, nfname, nlname,nemail,ncontact,id);
        
        }
      
      
      public void deleteGuest(){
        Scanner sc = new Scanner(System.in);
        config conf = new config();
        
       System.out.print("Enter ID to delete: ");
    int id = sc.nextInt();
    while(conf.getSingleValue("SELECT r_id FROM Renting WHERE r_id = ?",  id)  == 0){
            System.out.println("SELECTED ID DOESNT EXIST");
            System.out.println("PLEASE TRY AGAIN:");
            id = sc.nextInt();
    }
     String qry = "DELETE FROM Renting WHERE r_id = ?";
    conf.deleteRecord(qry,String.valueOf(id));
    
      }
}
   

























package it2c.somera.mr;

import java.util.Scanner;

public class Movies {
    public void mtransaction() {
        Scanner sc = new Scanner(System.in);
        String id;
        String response;
        do {
            System.out.println("\n.......................................................................");
            System.out.println("MOVIE PANEL");
            System.out.println("1. ADD MOVIES");
            System.out.println("2. VIEW MOVIES ");
            System.out.println("3. UPDATE MOVIES");
            System.out.println("4. DELETE MOVIES");
            System.out.println("5. EXIT");
            System.out.println("Enter action");
            int act = sc.nextInt();
            Movies mv = new Movies();
            switch (act) {
                case 1:
                    mv.addMovies();
                    mv.viewMovies(); 
                    break;

                case 2:
                    mv.viewMovies();
                    break;

                case 3:
                    mv.viewMovies();
                    mv.updateMovies();
                    mv.viewMovies();
                    break;

                case 4:
                    mv.viewMovies();
                    mv.deleteMovies();
                    mv.viewMovies();
                    break;
                    
                case 5:           System.out.println("Go backk to main menu?");
                return;  

                default:
                System.out.println("Invalid action. Please try again.");
                break;
        }

                 System.out.print("Continue in Guest Panel? (yes/No): ");
                 response = sc.next();
        
                 if (!response.equalsIgnoreCase("yes")) {
                  System.out.println("Going back to main menu...");
                 return;  
                 }

          
                 System.out.println("Continue? (yes/No)");
                response = sc.next();
   
                 }while(response.equals("yes"));
                 System.out.println("Thankyou");
   
    }

    public void addMovies() {
    Scanner sc = new Scanner(System.in);

    System.out.println("Movie Name");
    String mname = sc.nextLine();

    System.out.println("Movie Genre");
    String mgenre = sc.nextLine();

    System.out.println("Movie Duration");
    String mduration = sc.nextLine();

    System.out.println("Movie Price");
    Double price = sc.nextDouble();
    sc.nextLine(); 

    System.out.println("Movie Status (available/not available)");
    String mstatus = sc.nextLine();

    String qry = "INSERT INTO tbl_movies (m_name, m_genre, m_duration, m_price, m_status) VALUES (?, ?, ?, ?, ?)";
    config conf = new config();
    conf.addRecord(qry, mname, mgenre, mduration, price, mstatus);
    }

    public void viewMovies() {
        config conf = new config();
        String cqry = "SELECT * FROM tbl_movies";
        String[] hrds = {"ID", "Movie name", "Movie Genre", "Movie Duration", "Movie Price", "Movie Status"};
        String[] clmns = {"m_id", "m_name", "m_genre", "m_duration", "m_price", "m_status"};
        conf.viewRecords(cqry, hrds, clmns);
    }

    public void viewAvailableMovies() {
        config conf = new config();
        String cqry = "SELECT * FROM tbl_movies WHERE m_status = 'available'"; 
        String[] hrds = {"ID", "Movie name", "Movie Genre", "Movie Duration", "Movie Price", "Movie Status"};
        String[] clmns = {"m_id", "m_name", "m_genre", "m_duration", "m_price", "m_status"};
        conf.viewRecords(cqry, hrds, clmns);
    }
    
    
        
        
        private void updateMovies(){
            
        Scanner sc = new Scanner(System.in);
        config conf = new config();
            System.out.println("Enter ID to update");     
            int id = sc.nextInt();
            
            while(conf.getSingleValue("SELECT m_id FROM tbl_movies WHERE m_id = ?", id)==0){
            System.out.println("SELECTED ID DOESNT EXIST");
            System.out.println("PLEASE TRY AGAIN:");
            id = sc.nextInt();
            
        }
    
         
             System.out.println("Movie new Price");
            Double price = sc.nextDouble();
            sc.nextLine();
                    
             System.out.println("Enter new movie status");
            String mstatus = sc.nextLine();
            String qry = "UPDATE tbl_movies SET  m_price = ?, m_status = ? WHERE m_id = ?";        
            conf.updateRecord(qry , price, mstatus, id); 
        
        }
        
        public void deleteMovies(){
        Scanner sc = new Scanner(System.in);
        config conf = new config();
        
       System.out.print("Enter ID to delete: ");
        int id = sc.nextInt();
       while(conf.getSingleValue("SELECT m_id FROM tbl_movies WHERE m_id = ?",  id)  == 0){
            System.out.println("SELECTED ID DOESNT EXIST");
            System.out.println("PLEASE TRY AGAIN:");
            id = sc.nextInt();
    }
     String qry = "DELETE FROM tbl_movies WHERE m_id = ?";
    conf.deleteRecord(qry,String.valueOf(id));
        
}
       
        
        
        
        
}















package it2c.somera.mr;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Scanner;
public class Reservation {
   
    
    public void rtransaction(){
         Scanner sc = new Scanner(System.in);
     String response;
     do{
          System.out.println("TRANSACTION PANEL");
            
            System.out.println("1. ADD RESERVATION");
            System.out.println("2. VIEW RESERVATION ");
            System.out.println("3. UPDATE RESERVATION");      
            System.out.println("4. DELETE RESERVATION");
             System.out.println("5. EXIT");
            System.out.println("Enter action");           
            int  act = sc.nextInt();
           Reservation rs = new Reservation ();
            switch(act){
                case 1:         
                                        rs.addReservation();
                                        rs.viewReservation();
               break;
                
                case 2:             
                                         rs.viewReservation();
                break;
                
                case 3:         
                                         rs.viewReservation();
                                         rs.updateReservation();
                                         rs.viewReservation();
                break;
                
                case 4:          
                                          rs.viewReservation();
                                          rs.deleteReservation();
                                          rs.viewReservation();
                break;
                
                case 5: System.out.println("Go backk to main menu?");
                return;  

                default:
                System.out.println("Invalid action. Please try again.");
                break;
        }

                 System.out.println("Continue? (yes/No)");
                response = sc.next();
   
                 }while(response.equals("yes"));
                 System.out.println("Thankyou");
   
    }
    private void addReservation(){
        config conf = new config();
      Scanner sc = new Scanner(System.in);
        Guest cs = new Guest();
      cs.viewGuest();
      
        System.out.print("SELECT THE ID OF GUEST");
        int gid = sc.nextInt();
        
        String sql= "SELECT r_id FROM Renting WHERE r_id = ?";
        while(conf.getSingleValue(sql,gid)  == 0){
            System.out.print("SELECTED ID DOESNT EXIST");
            System.out.println("PLEASE TRY AGAIN:");
            gid = sc.nextInt();         
  }
           Movies mv = new Movies();
        mv.viewAvailableMovies();
        
        System.out.println("ENTERR ID OF MOVIES:");
      int mid = sc.nextInt();
      
     
          
          String availabilityQuery = "SELECT m_id FROM tbl_movies WHERE m_id = ? AND m_status = 'available'";
    while (conf.getSingleValue(availabilityQuery, mid) == 0) {
        System.out.println("MOVIE IS NOT AVAILABLE! PLEASE SELECT AGAIN:");
        mid = sc.nextInt();
          
      }
        
      
        
        String priceqry = "SELECT m_price FROM tbl_movies WHERE m_id = ?";
        double price  = conf.getSingleValue( priceqry, mid);
       
        
       
        
        System.out.println("Enter Cash Recieved:");
        double rcash = sc.nextDouble();
        
        while(rcash < price){
            System.out.println("Invalid amount, TRY AGAIN!!");
            rcash = sc.nextDouble();
        }   
            System.out.println("Cash Received:"+rcash);
            double change = rcash - price;
            System.out.println("change:"+change);
        
        LocalDate currdate = LocalDate.now();
        DateTimeFormatter format =  DateTimeFormatter.ofPattern("MM/dd/yyyy");
        String date = currdate.format(format);
        
        String status = "PENDING";
        
        String reservationqry = "INSERT INTO tbl_reservation ( r_id, m_id, s_rcash, s_date, s_status) " 
                + "VALUES (?, ?, ?, ?, ?)";
        
        
        conf.addRecord(reservationqry, gid, mid, rcash, date , status);
                
    }
        
      public void viewReservation() {
    String qry = "SELECT s_id, r_lname, m_name, m_price, s_rcash - m_price AS change, m_duration, s_date, s_status " +
                 "FROM tbl_reservation " +
                 "LEFT JOIN Renting ON Renting.r_id = tbl_reservation.r_id " +
                 "LEFT JOIN tbl_movies ON tbl_movies.m_id = tbl_reservation.m_id";
    String[] hrds = {"Reservation ID", "Last Name", "Movies", "Price", "Change", "Duration", "Date", "Status"};
    String[] clmns = {"s_id", "r_lname", "m_name", "m_price", "change", "m_duration", "s_date", "s_status"};
    config conf = new config();
    conf.viewRecords(qry, hrds, clmns);
}

        
            
            
            
        
        
       private void updateReservation() {
    config conf = new config();
    Scanner sc = new Scanner(System.in);

    System.out.print("Enter Reservation ID to update: ");
    int resId = sc.nextInt();

   
    String checkQuery = "SELECT s_id FROM tbl_reservation WHERE s_id = ?";
    if (conf.getSingleValue(checkQuery, resId) == 0) {
        System.out.println("Reservation ID does not exist.");
        return;
    }

    
    String dateQuery = "SELECT s_date FROM tbl_reservation WHERE s_id = ?";
    String reservationDateStr = conf.getStringValue(dateQuery, resId);
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");
    LocalDate reservationDate = LocalDate.parse(reservationDateStr, formatter);
    LocalDate currentDate = LocalDate.now();

    
    if (reservationDate.isBefore(currentDate.minusDays(1))) {
        String statusUpdateQuery = "UPDATE tbl_reservation SET s_status = 'Done' WHERE s_id = ?";
        conf.updateRecord(statusUpdateQuery, resId);
        System.out.println("Reservation status has been updated to 'Done' as it is older than 1 day.");
        return;
    }

  
    Movies mv = new Movies();
    mv.viewAvailableMovies();

   
    System.out.print("Enter new Movie ID: ");
    int newMid = sc.nextInt();

    String movieCheck = "SELECT m_id FROM tbl_movies WHERE m_id = ?";
    while (conf.getSingleValue(movieCheck, newMid) == 0) {
        System.out.print("Movie ID does not exist. Enter again: ");
        newMid = sc.nextInt();
    }

   
    System.out.print("Enter new Cash Received: ");
    double newCash = sc.nextDouble();


    String priceQuery = "SELECT m_price FROM tbl_movies WHERE m_id = ?";
    double price = conf.getSingleValue(priceQuery, newMid);

 
    while (newCash < price) {
        System.out.println("Invalid amount. Cash received must be at least the movie price (" + price + "). Enter again:");
        newCash = sc.nextDouble();
    }
    System.out.println("Cash Received: " + newCash);
    double change = newCash - price;


    String updateQuery = "UPDATE tbl_reservation SET m_id = ?, s_rcash = ? WHERE s_id = ?";
    conf.updateRecord(updateQuery, newMid, newCash, resId);
    System.out.println("Change: " + change);
    System.out.println("Reservation details have been updated.");
}


       
        
        public void deleteReservation(){
        Scanner sc = new Scanner(System.in);
        config conf = new config();
        
       System.out.print("Enter Reservation ID to delete: ");
        int id = sc.nextInt();
       while(conf.getSingleValue("SELECT s_id FROM tbl_reservation WHERE s_id = ?",  id)  == 0){
            System.out.println("SELECTED ID DOESNT EXIST");
            System.out.println("PLEASE TRY AGAIN:");
            id = sc.nextInt();
    }
     String qry = "DELETE FROM tbl_reservation WHERE s_id = ?";
    conf.deleteRecord(qry,String.valueOf(id));
        
}
        
        
        
        
        
    }
    













package it2c.somera.mr;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;




public class config {
   
    public static Connection connectDB() {
        Connection con = null;
        try {
            Class.forName("org.sqlite.JDBC"); 
            con = DriverManager.getConnection("jdbc:sqlite:somera.db");
     
        } catch (ClassNotFoundException | SQLException e) {
            System.out.println("Connection Failed: " + e);
        }
        return con;
    }

    
     public void addRecord(String sql, Object... values) {
    try (Connection conn = this.connectDB(); // Use the connectDB method
         PreparedStatement pstmt = conn.prepareStatement(sql)) {

        // Loop through the values and set them in the prepared statement dynamically
        for (int i = 0; i < values.length; i++) {
            if (values[i] instanceof Integer) {
                pstmt.setInt(i + 1, (Integer) values[i]); // If the value is Integer
            } else if (values[i] instanceof Double) {
                pstmt.setDouble(i + 1, (Double) values[i]); // If the value is Double
            } else if (values[i] instanceof Float) {
                pstmt.setFloat(i + 1, (Float) values[i]); // If the value is Float
            } else if (values[i] instanceof Long) {
                pstmt.setLong(i + 1, (Long) values[i]); // If the value is Long
            } else if (values[i] instanceof Boolean) {
                pstmt.setBoolean(i + 1, (Boolean) values[i]); // If the value is Boolean
            } else if (values[i] instanceof java.util.Date) {
                pstmt.setDate(i + 1, new java.sql.Date(((java.util.Date) values[i]).getTime())); // If the value is Date
            } else if (values[i] instanceof java.sql.Date) {
                pstmt.setDate(i + 1, (java.sql.Date) values[i]); // If it's already a SQL Date
            } else if (values[i] instanceof java.sql.Timestamp) {
                pstmt.setTimestamp(i + 1, (java.sql.Timestamp) values[i]); // If the value is Timestamp
            } else {
                pstmt.setString(i + 1, values[i].toString()); // Default to String for other types
            }
        }

        pstmt.executeUpdate();
  
    } catch (SQLException e) {
        System.out.println("Error adding record: " + e.getMessage());
    }
}



   public void viewRecords(String sqlQuery, String[] columnHeaders, String[] columnNames, Object... params) {
    if (columnHeaders.length != columnNames.length) {
        System.out.println("Error: Mismatch between column headers and column names.");
        return;
    }

    try (Connection conn = this.connectDB();
         PreparedStatement pstmt = conn.prepareStatement(sqlQuery)) {

        // Set parameters dynamically
        for (int i = 0; i < params.length; i++) {
            pstmt.setObject(i + 1, params[i]);
        }

        ResultSet rs = pstmt.executeQuery();

        // Print column headers
        StringBuilder headerLine = new StringBuilder();
        headerLine.append("--------------------------------------------------------------------------------\n| ");
        for (String header : columnHeaders) {
            headerLine.append(String.format("%-20s | ", header));
        }
        headerLine.append("\n--------------------------------------------------------------------------------");
        System.out.println(headerLine.toString());

        // Print rows
        while (rs.next()) {
            StringBuilder row = new StringBuilder("| ");
            for (String colName : columnNames) {
                String value = rs.getString(colName);
                row.append(String.format("%-20s | ", value != null ? value : ""));
            }
            System.out.println(row.toString());
        }
        System.out.println("--------------------------------------------------------------------------------");

    } catch (SQLException e) {
        System.out.println("Error retrieving records: " + e.getMessage());
    }
}




      public void deleteRecord(String sql, String... values) {
        try (Connection conn = this.connectDB();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            for (int i = 0; i < values.length; i++) {
                pstmt.setString(i + 1, values[i]);
            }

            pstmt.executeUpdate();
            System.out.println("Record deleted successfully!");
        } catch (SQLException e) {
            System.out.println("Error deleting record: " + e.getMessage());
        }
    

      }

   
    public void updateRecord(String sql, Object... values) {
        try (Connection conn = this.connectDB(); // Use the connectDB method
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // Loop through the values and set them in the prepared statement dynamically
            for (int i = 0; i < values.length; i++) {
                if (values[i] instanceof Integer) {
                    pstmt.setInt(i + 1, (Integer) values[i]); // If the value is Integer
                } else if (values[i] instanceof Double) {
                    pstmt.setDouble(i + 1, (Double) values[i]); // If the value is Double
                } else if (values[i] instanceof Float) {
                    pstmt.setFloat(i + 1, (Float) values[i]); // If the value is Float
                } else if (values[i] instanceof Long) {
                    pstmt.setLong(i + 1, (Long) values[i]); // If the value is Long
                } else if (values[i] instanceof Boolean) {
                    pstmt.setBoolean(i + 1, (Boolean) values[i]); // If the value is Boolean
                } else if (values[i] instanceof java.util.Date) {
                    pstmt.setDate(i + 1, new java.sql.Date(((java.util.Date) values[i]).getTime())); // If the value is Date
                } else if (values[i] instanceof java.sql.Date) {
                    pstmt.setDate(i + 1, (java.sql.Date) values[i]); // If it's already a SQL Date
                } else if (values[i] instanceof java.sql.Timestamp) {
                    pstmt.setTimestamp(i + 1, (java.sql.Timestamp) values[i]); // If the value is Timestamp
                } else {
                    pstmt.setString(i + 1, values[i].toString()); // Default to String for other types
                }
            }

            pstmt.executeUpdate();
            System.out.println("Record updated successfully!");
        } catch (SQLException e) {
            System.out.println("Error updating record: " + e.getMessage());
        }
    }


 private void setPreparedStatementValues(PreparedStatement pstmt, Object... values) throws SQLException {
        for (int i = 0; i < values.length; i++) {
            if (values[i] instanceof Integer) {
                pstmt.setInt(i + 1, (Integer) values[i]);
            } else if (values[i] instanceof Double) {
                pstmt.setDouble(i + 1, (Double) values[i]);
            } else if (values[i] instanceof Float) {
                pstmt.setFloat(i + 1, (Float) values[i]);
            } else if (values[i] instanceof Long) {
                pstmt.setLong(i + 1, (Long) values[i]);
            } else if (values[i] instanceof Boolean) {
                pstmt.setBoolean(i + 1, (Boolean) values[i]);
            } else if (values[i] instanceof java.util.Date) {
                pstmt.setDate(i + 1, new java.sql.Date(((java.util.Date) values[i]).getTime()));
            } else if (values[i] instanceof java.sql.Date) {
                pstmt.setDate(i + 1, (java.sql.Date) values[i]);
            } else if (values[i] instanceof java.sql.Timestamp) {
                pstmt.setTimestamp(i + 1, (java.sql.Timestamp) values[i]);
            } else {
                pstmt.setString(i + 1, values[i].toString());
            }
        }
    }

  //-----------------------------------------------
    // GET SINGLE VALUE METHOD
    //-----------------------------------------------

    public double getSingleValue(String sql, Object... params) {
        double result = 0.0;
        try (Connection conn = connectDB();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            setPreparedStatementValues(pstmt, params);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                result = rs.getDouble(1);
            }

        } catch (SQLException e) {
            System.out.println("Error retrieving single value: " + e.getMessage());
        }
        return result;
    }



public String getStringValue(String sql, Object... params) {
    String result = null;
    try (Connection conn = connectDB();
         PreparedStatement pstmt = conn.prepareStatement(sql)) {

        setPreparedStatementValues(pstmt, params);
        ResultSet rs = pstmt.executeQuery();
        if (rs.next()) {
            result = rs.getString(1); // Retrieve the first column as a String
        }

    } catch (SQLException e) {
        System.out.println("Error retrieving string value: " + e.getMessage());
    }
    return result;
}
}
























package it2c.somera.mr;

import java.util.Scanner;

public class Reports {
    public void generateReport() {
        Scanner sc = new Scanner(System.in);
        String response;
        
        do {
            System.out.println("REPORT PANEL");
            System.out.println("1. General Report (Overall Summary)");
            System.out.println("2. Specific Report (Detailed Records)");
            System.out.println("3. EXIT");
            System.out.print("Enter your choice: ");
            int choice = sc.nextInt();
            
            switch (choice) {
                case 1:
                    generalReport();
                    break;
                case 2:
                    specificReport();
                    break;
                case 3:
                    System.out.println("Exiting the report panel...");
                    return;
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
            
            System.out.println("Do you want to generate another report? (yes/no)");
            response = sc.next();
            
        } while (response.equalsIgnoreCase("yes"));
        
        System.out.println("Thank you for using the report panel!");
    }

    /**
     * Generates a general report summarizing reservations.
     */
    private void generalReport() {
        config conf = new config();

        System.out.println("\n---------------------- General Report ----------------------");

        // Query to count total reservations
        String totalReservationsQry = "SELECT COUNT(*) FROM tbl_reservation";
        double totalReservations = conf.getSingleValue(totalReservationsQry);
        System.out.println("Total Reservations: " + (int) totalReservations);

        // Query to count completed reservations
        String completedReservationsQry = "SELECT COUNT(*) FROM tbl_reservation WHERE s_status = 'Done'";
        double completedReservations = conf.getSingleValue(completedReservationsQry);
        System.out.println("Completed Reservations: " + (int) completedReservations);

        // Query to count pending reservations
        String pendingReservationsQry = "SELECT COUNT(*) FROM tbl_reservation WHERE s_status = 'Pending'";
        double pendingReservations = conf.getSingleValue(pendingReservationsQry);
        System.out.println("Pending Reservations: " + (int) pendingReservations);

        // Query to calculate total earnings
        String totalEarningsQry = "SELECT SUM(s_rcash) FROM tbl_reservation";
        double totalEarnings = conf.getSingleValue(totalEarningsQry);
        System.out.println("Total Earnings: PHP " + totalEarnings);

        System.out.println("-----------------------------------------------------------\n");
    }

    /**
     * Generates a specific report detailing records.
     */
    private void specificReport() {
        config conf = new config();
        Scanner sc = new Scanner(System.in);

        System.out.println("\n---------------------- Specific Report ----------------------");
        System.out.println("1. View Detailed Reservation List");
        System.out.println("2. View Reservation by Guest ID");
        System.out.println("3. View Reservation by Date");
        System.out.print("Choose a specific report type: ");
        int choice = sc.nextInt();

        switch (choice) {
            case 1:
                // Detailed list of reservations
                String qry = "SELECT s_id, r_lname, m_name, m_price, s_rcash, s_date, s_status FROM tbl_reservation " +
                             "LEFT JOIN Renting ON Renting.r_id = tbl_reservation.r_id " +
                             "LEFT JOIN tbl_movies ON tbl_movies.m_id = tbl_reservation.m_id";
                String[] headers = {"Reservation ID", "Guest Name", "Movie", "Price", "Cash Received", "Date", "Status"};
                String[] columns = {"s_id", "r_lname", "m_name", "m_price", "s_rcash", "s_date", "s_status"};
                conf.viewRecords(qry, headers, columns);
                break;

            case 2:
                // Detailed reservations by Guest ID
                System.out.print("Enter Guest ID: ");
                int guestId = sc.nextInt();
                String guestQry = "SELECT s_id, r_lname, m_name, m_price, s_rcash, s_date, s_status FROM tbl_reservation " +
                                  "LEFT JOIN Renting ON Renting.r_id = tbl_reservation.r_id " +
                                  "LEFT JOIN tbl_movies ON tbl_movies.m_id = tbl_reservation.m_id " +
                                  "WHERE tbl_reservation.r_id = ?";
                String[] guestHeaders = {"Reservation ID", "Guest Name", "Movie", "Price", "Cash Received", "Date", "Status"};
                String[] guestColumns = {"s_id", "r_lname", "m_name", "m_price", "s_rcash", "s_date", "s_status"};
                conf.viewRecords(guestQry, guestHeaders, guestColumns, guestId);
                break;

            case 3:
              
                System.out.print("Enter Date (MM/dd/yyyy): ");
                sc.nextLine(); // Consume leftover newline
                String date = sc.nextLine();
                String dateQry = "SELECT s_id, r_lname, m_name, m_price, s_rcash, s_date, s_status FROM tbl_reservation " +
                                 "LEFT JOIN Renting ON Renting.r_id = tbl_reservation.r_id " +
                                 "LEFT JOIN tbl_movies ON tbl_movies.m_id = tbl_reservation.m_id " +
                                 "WHERE s_date = ?";
                String[] dateHeaders = {"Reservation ID", "Guest Name", "Movie", "Price", "Cash Received", "Date", "Status"};
                String[] dateColumns = {"s_id", "r_lname", "m_name", "m_price", "s_rcash", "s_date", "s_status"};
                conf.viewRecords(dateQry, dateHeaders, dateColumns, date);
                break;

            default:
                System.out.println("Invalid choice! Returning to main menu.");
        }

        System.out.println("------------------------------------------------------------\n");
    }  
}











































































































































